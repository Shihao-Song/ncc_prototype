// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace NCC_Graph_Proto {
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace NCC_Graph_Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::NCC_Graph_Proto::Graph* Arena::CreateMaybeMessage<::NCC_Graph_Proto::Graph>(Arena*);
template<> ::NCC_Graph_Proto::Node* Arena::CreateMaybeMessage<::NCC_Graph_Proto::Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NCC_Graph_Proto {

enum Node_NeuronType : int {
  Node_NeuronType_IO = 0,
  Node_NeuronType_BIAS = 1,
  Node_NeuronType_Node_NeuronType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Node_NeuronType_Node_NeuronType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Node_NeuronType_IsValid(int value);
constexpr Node_NeuronType Node_NeuronType_NeuronType_MIN = Node_NeuronType_IO;
constexpr Node_NeuronType Node_NeuronType_NeuronType_MAX = Node_NeuronType_BIAS;
constexpr int Node_NeuronType_NeuronType_ARRAYSIZE = Node_NeuronType_NeuronType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Node_NeuronType_descriptor();
template<typename T>
inline const std::string& Node_NeuronType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Node_NeuronType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Node_NeuronType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Node_NeuronType_descriptor(), enum_t_value);
}
inline bool Node_NeuronType_Parse(
    const std::string& name, Node_NeuronType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Node_NeuronType>(
    Node_NeuronType_descriptor(), name, value);
}
// ===================================================================

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NCC_Graph_Proto.Node) */ {
 public:
  inline Node() : Node(nullptr) {};
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NCC_Graph_Proto.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Node_NeuronType NeuronType;
  static constexpr NeuronType IO =
    Node_NeuronType_IO;
  static constexpr NeuronType BIAS =
    Node_NeuronType_BIAS;
  static inline bool NeuronType_IsValid(int value) {
    return Node_NeuronType_IsValid(value);
  }
  static constexpr NeuronType NeuronType_MIN =
    Node_NeuronType_NeuronType_MIN;
  static constexpr NeuronType NeuronType_MAX =
    Node_NeuronType_NeuronType_MAX;
  static constexpr int NeuronType_ARRAYSIZE =
    Node_NeuronType_NeuronType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NeuronType_descriptor() {
    return Node_NeuronType_descriptor();
  }
  template<typename T>
  static inline const std::string& NeuronType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NeuronType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NeuronType_Name.");
    return Node_NeuronType_Name(enum_t_value);
  }
  static inline bool NeuronType_Parse(const std::string& name,
      NeuronType* value) {
    return Node_NeuronType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdjsFieldNumber = 3,
    kWeightsFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated uint64 adjs = 3;
  int adjs_size() const;
  private:
  int _internal_adjs_size() const;
  public:
  void clear_adjs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_adjs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_adjs() const;
  void _internal_add_adjs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_adjs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 adjs(int index) const;
  void set_adjs(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_adjs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      adjs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_adjs();

  // repeated double weights = 4;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  double _internal_weights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_weights() const;
  void _internal_add_weights(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_weights();
  public:
  double weights(int index) const;
  void set_weights(int index, double value);
  void add_weights(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_weights();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .NCC_Graph_Proto.Node.NeuronType type = 2;
  void clear_type();
  ::NCC_Graph_Proto::Node_NeuronType type() const;
  void set_type(::NCC_Graph_Proto::Node_NeuronType value);
  private:
  ::NCC_Graph_Proto::Node_NeuronType _internal_type() const;
  void _internal_set_type(::NCC_Graph_Proto::Node_NeuronType value);
  public:

  // @@protoc_insertion_point(class_scope:NCC_Graph_Proto.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > adjs_;
  mutable std::atomic<int> _adjs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NCC_Graph_Proto.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {};
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NCC_Graph_Proto.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .NCC_Graph_Proto.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::NCC_Graph_Proto::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NCC_Graph_Proto::Node >*
      mutable_nodes();
  private:
  const ::NCC_Graph_Proto::Node& _internal_nodes(int index) const;
  ::NCC_Graph_Proto::Node* _internal_add_nodes();
  public:
  const ::NCC_Graph_Proto::Node& nodes(int index) const;
  ::NCC_Graph_Proto::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NCC_Graph_Proto::Node >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:NCC_Graph_Proto.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NCC_Graph_Proto::Node > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// uint64 id = 1;
inline void Node::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::id() const {
  // @@protoc_insertion_point(field_get:NCC_Graph_Proto.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Node::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NCC_Graph_Proto.Node.id)
}

// .NCC_Graph_Proto.Node.NeuronType type = 2;
inline void Node::clear_type() {
  type_ = 0;
}
inline ::NCC_Graph_Proto::Node_NeuronType Node::_internal_type() const {
  return static_cast< ::NCC_Graph_Proto::Node_NeuronType >(type_);
}
inline ::NCC_Graph_Proto::Node_NeuronType Node::type() const {
  // @@protoc_insertion_point(field_get:NCC_Graph_Proto.Node.type)
  return _internal_type();
}
inline void Node::_internal_set_type(::NCC_Graph_Proto::Node_NeuronType value) {
  
  type_ = value;
}
inline void Node::set_type(::NCC_Graph_Proto::Node_NeuronType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NCC_Graph_Proto.Node.type)
}

// repeated uint64 adjs = 3;
inline int Node::_internal_adjs_size() const {
  return adjs_.size();
}
inline int Node::adjs_size() const {
  return _internal_adjs_size();
}
inline void Node::clear_adjs() {
  adjs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::_internal_adjs(int index) const {
  return adjs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::adjs(int index) const {
  // @@protoc_insertion_point(field_get:NCC_Graph_Proto.Node.adjs)
  return _internal_adjs(index);
}
inline void Node::set_adjs(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  adjs_.Set(index, value);
  // @@protoc_insertion_point(field_set:NCC_Graph_Proto.Node.adjs)
}
inline void Node::_internal_add_adjs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  adjs_.Add(value);
}
inline void Node::add_adjs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_adjs(value);
  // @@protoc_insertion_point(field_add:NCC_Graph_Proto.Node.adjs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Node::_internal_adjs() const {
  return adjs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Node::adjs() const {
  // @@protoc_insertion_point(field_list:NCC_Graph_Proto.Node.adjs)
  return _internal_adjs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Node::_internal_mutable_adjs() {
  return &adjs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Node::mutable_adjs() {
  // @@protoc_insertion_point(field_mutable_list:NCC_Graph_Proto.Node.adjs)
  return _internal_mutable_adjs();
}

// repeated double weights = 4;
inline int Node::_internal_weights_size() const {
  return weights_.size();
}
inline int Node::weights_size() const {
  return _internal_weights_size();
}
inline void Node::clear_weights() {
  weights_.Clear();
}
inline double Node::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline double Node::weights(int index) const {
  // @@protoc_insertion_point(field_get:NCC_Graph_Proto.Node.weights)
  return _internal_weights(index);
}
inline void Node::set_weights(int index, double value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:NCC_Graph_Proto.Node.weights)
}
inline void Node::_internal_add_weights(double value) {
  weights_.Add(value);
}
inline void Node::add_weights(double value) {
  _internal_add_weights(value);
  // @@protoc_insertion_point(field_add:NCC_Graph_Proto.Node.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Node::_internal_weights() const {
  return weights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Node::weights() const {
  // @@protoc_insertion_point(field_list:NCC_Graph_Proto.Node.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Node::_internal_mutable_weights() {
  return &weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Node::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:NCC_Graph_Proto.Node.weights)
  return _internal_mutable_weights();
}

// -------------------------------------------------------------------

// Graph

// repeated .NCC_Graph_Proto.Node nodes = 1;
inline int Graph::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Graph::nodes_size() const {
  return _internal_nodes_size();
}
inline void Graph::clear_nodes() {
  nodes_.Clear();
}
inline ::NCC_Graph_Proto::Node* Graph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:NCC_Graph_Proto.Graph.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NCC_Graph_Proto::Node >*
Graph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:NCC_Graph_Proto.Graph.nodes)
  return &nodes_;
}
inline const ::NCC_Graph_Proto::Node& Graph::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::NCC_Graph_Proto::Node& Graph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:NCC_Graph_Proto.Graph.nodes)
  return _internal_nodes(index);
}
inline ::NCC_Graph_Proto::Node* Graph::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::NCC_Graph_Proto::Node* Graph::add_nodes() {
  // @@protoc_insertion_point(field_add:NCC_Graph_Proto.Graph.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NCC_Graph_Proto::Node >&
Graph::nodes() const {
  // @@protoc_insertion_point(field_list:NCC_Graph_Proto.Graph.nodes)
  return nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NCC_Graph_Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NCC_Graph_Proto::Node_NeuronType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NCC_Graph_Proto::Node_NeuronType>() {
  return ::NCC_Graph_Proto::Node_NeuronType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
